#!/usr/bin/env node

/**
 * Module dependencies.
 */

 "use strict";

var app = require('../app');
var debug = require('debug')('rv2me:server');
var http = require('http');
const WebSocket = require("ws");

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.DBWEBB_PORT || '1337');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Link websocket server to Express server
 */
const wss = new WebSocket.Server({
    server: server,
    clientTracking: true, // keep track on connected clients
    handleProtocols: handleProtocols
});

var users = [];

/**
 * Select subprotocol to use for connection.
 *
 * @param {Array} protocols              Subprotocols to choose from, sent
 *                                        by client request.
 * @param {http.IncomingMessage} request The client HTTP GET request.
 *
 * @return {void}
 */
function handleProtocols(protocols /*, request */) {
    console.log(`Incoming protocol requests '${protocols}'.`);
    for (var i=0; i < protocols.length; i++) {
        if (protocols[i] === "text") {
            return "text";
        } else if (protocols[i] === "json") {
            return "json";
        }
    }
    return false;
}

// Broadcast data to everyone except one self (ws).
wss.broadcastExcept = (ws, data) => {
    let clients = 0;

    wss.clients.forEach((client) => {
        if (client !== ws && client.readyState === WebSocket.OPEN) {
            clients++;
            client.send(data);
        }
    });
    console.log(`Broadcasted data to ${clients} (${wss.clients.size}) clients.`);
};

// Broadcast data to everyone except one self (ws).
wss.broadcastUsers = (data) => {
    let clients = 0;
    wss.clients.forEach((client) => {
        clients++;
        client.send(data);
    });
    console.log(`Broadcasted users to ${clients} (${wss.clients.size}) clients.`);
};

// Setup for websocket requests.
// Docs: https://github.com/websockets/ws/blob/master/doc/ws.md
wss.on("connection", (ws, data) => {
    console.log("Connection received. Adding client.");
    // wss.broadcastExcept(ws, `New client connected (${wss.clients.size}).`);
    // wss.broadcastUsers(nickname);
    // console.log("ws - data: " + wss.clients);
    // ws.send("VÃ¤lkommen!");
    // console.log("WS: " + ws);

    ws.on("message", (message) => {
        // console.log(jsonmsg.type);
        // console.log(jsonmsg.content);

        if (ws.protocol === "json") {
            console.log("kommer hit");
            var jsonmsg = JSON.parse(message);
            console.log(jsonmsg);
            if (jsonmsg.type === 'newuser') {
                users.push(jsonmsg.content);
                console.log(users);
                var msg = {
                    type: "users",
                    userarray: users
                }
                wss.broadcastUsers(JSON.stringify(msg));
            } else if (jsonmsg.type === 'deleteuser') {
                var deletenick = jsonmsg.content;
                // console.log("deletenick: " + deletenick);
                users = users.filter( function(deletenick) {
                    return deletenick;
                });
                users.splice(users.indexOf(deletenick),1);
                // console.log("After deleting user:" + users);
            } else if (jsonmsg.type === 'clientmsg') {
                // console.log("jsonmsg.nick: " +jsonmsg.nick);
                var msg = {
                    type: "clientmsg",
                    nick: jsonmsg.nick,
                    content: jsonmsg.content
                }
                wss.broadcastUsers(JSON.stringify(msg));
            }
        } else if (ws.protocol === 'text') {
            wss.broadcastUsers(message);
        }
    });

    ws.on("error", (error) => {
        console.log(`Server error: ${error}`);
    });

    // ws.on('close',(e) => {
	// 	switch (e) {
	// 	case 1000:	// CLOSE_NORMAL
	// 		console.log("WebSocket: closed");
    //         sendusers = {
    //                 type: "users",
    //                 userarray: users
    //             }
    //             wss.broadcastUsers(JSON.stringify(sendusers));
	// 		break;
	// 	default:	// Abnormal closure
	// 		ws.reconnect(e);
	// 		break;
	// 	}
	// 	this.onclose(e);
    ws.on("close", (code, reason) => {
        console.log(`Closing connection: ${code} ${reason}`);
        var sendusers = {
            type: "users",
            userarray: users
        }
        wss.broadcastUsers(JSON.stringify(sendusers));
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

    console.log('Listening on ' + bind);
    debug('Listening on ' + bind);
}
